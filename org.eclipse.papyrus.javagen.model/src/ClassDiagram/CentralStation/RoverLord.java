// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package ClassDiagram.CentralStation;

import ClassDiagram.CentralStation.DataManager;
import ClassDiagram.CentralStation.RewardPointsCalculator;
import ClassDiagram.CentralStation.RoverManager;
import ClassDiagram.Rover.RoverCommunicator;
import ClassDiagram.Types.Environment;
import ClassDiagram.Types.Mission;
import ClassDiagram.Types.Position;
import java.awt.Image;

/************************************************************/
/**
 * 
 */
public class RoverLord implements RoverManager, DataManager {
	/**
	 * 
	 */
	private RoverCommunicator[] roverCommunicators;
	/**
	 * 
	 */
	private RewardPointsCalculator rewardPointsCalculator;
	/**
	 * 
	 */
	private Environment environment;
	
	private int lastRewardUpdate;

	/**
	 * 
	 * @param roverID 
	 * @return 
	 */
	public Position getPositionOf(int roverID) {
		if (roverID >= roverCommunicators.length) {
			return null;
		}
		return roverCommunicators[roverID].getPosition();
	}

	/**
	 * 
	 * @param roverID 
	 * @return 
	 */
	public Image getVideoOf(int roverID) {
		if (roverID >= roverCommunicators.length) {
			return null;
		}
		return roverCommunicators[roverID].getImage();
	}

	/**
	 * 
	 * @param roverID 
	 * @return 
	 */
	public boolean getOperationalStatusOf(int roverID) {
		if (roverID >= roverCommunicators.length) {
			return false;
		}
		return roverCommunicators[roverID].getOperationalStatus();
	}

	/**
	 * 
	 * @param roverID 
	 * @return 
	 */
	public Mission getMissionOf(int roverID) {
		if (roverID >= roverCommunicators.length) {
			return null;
		}
		return roverCommunicators[roverID].getMissionStatus();
	}

	/**
	 * 
	 * @return 
	 */
	public int getRewardPoints() {
		return rewardPointsCalculator.getRewardPoints();
	}

	/**
	 * 
	 * @param roverID 
	 * @param mission 
	 */
	public void changeMissionOf(int roverID, Mission mission) {
		roverCommunicators[roverID].changeMission(mission);	
	}

	/**
	 * 
	 * @param roverID 
	 */
	public void abortMissionOf(int roverID) {
		roverCommunicators[roverID].abortMission();
	}

	/**
	 * 
	 * @param environment 
	 * @param rovers 
	 */
	public RoverLord(Environment environment, RoverCommunicator[] rovers) {
		this.environment = environment;
		this.roverCommunicators = rovers;
		rewardPointsCalculator = new RewardPointsCalculator();
		lastRewardUpdate = (int) System.currentTimeMillis() / 1000;
	}

	/**
	 * 
	 */
	public void update() {
		int currentTime = (int) System.currentTimeMillis() / 1000;
		if (currentTime - lastRewardUpdate >= 20) {
			rewardPointsCalculator.calculateRewardPoints(environment, roverCommunicators);
			lastRewardUpdate = currentTime;
		}
	}
	
	public RoverCommunicator[] getRoverCommunicators() {
		return roverCommunicators;
	}
};
